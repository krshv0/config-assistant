{
  "page": "config/events",
  "url": "https://felixkratz.github.io/SketchyBar/config/events",
  "sections": [
    {
      "type": "list",
      "ordered": false,
      "items": [
        "Features",
        "Setup",
        "ConfigurationBar PropertiesItem PropertiesSpecial ComponentsPopup MenusEvents & ScriptingQuerying InformationAnimationsType NomenclatureReloading the configurationTips & Tricks",
        "Bar Properties",
        "Item Properties",
        "Special Components",
        "Popup Menus",
        "Events & Scripting",
        "Querying Information",
        "Animations",
        "Type Nomenclature",
        "Reloading the configuration",
        "Tips & Tricks",
        "Credits"
      ]
    },
    {
      "type": "list",
      "ordered": false,
      "items": [
        "Bar Properties",
        "Item Properties",
        "Special Components",
        "Popup Menus",
        "Events & Scripting",
        "Querying Information",
        "Animations",
        "Type Nomenclature",
        "Reloading the configuration",
        "Tips & Tricks"
      ]
    },
    {
      "type": "list",
      "ordered": false,
      "items": [
        "",
        "Configuration",
        "Events & Scripting"
      ]
    },
    {
      "type": "header",
      "level": "h1",
      "content": "Events & Scripting"
    },
    {
      "type": "header",
      "level": "h2",
      "content": "Events and Scripting​"
    },
    {
      "type": "paragraph",
      "content": "All items cansubscribeto arbitraryevents; when theeventhappens,\nall items subscribed to theeventwill execute theirscript.\nThis can be used to create more reactive and performant items which react to\nevents rather than polling for a change."
    },
    {
      "type": "paragraph",
      "content": "where the events are:"
    },
    {
      "type": "paragraph",
      "content": "Some events send additional information in the$INFOvariable\nWhen an item is subscribed to these events thescriptis run and it gets passed the$SENDERvariable, which holds exactly the above names to distinguish between the different events.\nIt is thus possible to have a script that reacts to each event differently e.g. via a switch for the$SENDERvariable in thescript."
    },
    {
      "type": "paragraph",
      "content": "Alternatively a fixedupdate_freqcan be--set, such that the event is routinely run to poll for change, the$SENDERvariable will in this case hold the valueroutine."
    },
    {
      "type": "paragraph",
      "content": "When an item invokes a script, the script has access to some environment variables, such as:"
    },
    {
      "type": "paragraph",
      "content": "Where$NAMEis the name of the item that has invoked the script and$SENDERis the reason why the script is executed.\nThe variable$CONFIG_DIRcontains the absolute path of the directory where the current sketchybarrc file is located."
    },
    {
      "type": "paragraph",
      "content": "If an item isclickedthe script has access to the additional variables:"
    },
    {
      "type": "paragraph",
      "content": "where the$BUTTONcan beleft,rightorotherand specifies the mouse button that was used to click the item, while the$MODIFIERis eithershift,ctrl,altorcmdand\nspecifies the modifier key held down while clicking the item."
    },
    {
      "type": "paragraph",
      "content": "If an item receive ascrollevent from the mouse the script gets send the additional$SCROLL_DELTAvariable."
    },
    {
      "type": "paragraph",
      "content": "All scripts are forced to terminate after 60 seconds and do not run while the system is sleeping."
    },
    {
      "type": "header",
      "level": "h3",
      "content": "Creating custom events​"
    },
    {
      "type": "paragraph",
      "content": "This allows to define events which are triggered by arbitrary applications or manually (see Trigger custom events).\nItems can also subscribe to these events for their script execution."
    },
    {
      "type": "paragraph",
      "content": "Optional: You can subscribe to the notifications sent to the NSDistributedNotificationCenter e.g.\nthe notification Spotify sends on track change:com.spotify.client.PlaybackStateChanged(example), or the\nnotification sent by the system when the screen is unlocked:com.apple.screenIsUnlocked(example)\nto create more responsive items.\nCustom events that subscribe to NSDistributedNotificationCenter notifications\nwill receive additional notification information in the$INFOvariable if available.\nFor more NSDistributedNotifications seethis discussion."
    },
    {
      "type": "header",
      "level": "h3",
      "content": "Triggering custom events​"
    },
    {
      "type": "paragraph",
      "content": "This triggers a custom event that has been added before"
    },
    {
      "type": "paragraph",
      "content": "Optionally you can add environment variables to the trigger command witch are passed to the script, e.g.:"
    },
    {
      "type": "paragraph",
      "content": "will trigger the demo event and$VARwill be available as an environment variable in the scripts that this event invokes."
    },
    {
      "type": "header",
      "level": "h3",
      "content": "Forcing all shell scripts to run and the bar to refresh​"
    },
    {
      "type": "paragraph",
      "content": "This command forces all scripts to run and all events to be emitted, it shouldneverbe used in an item script, as this would lead to infinite loops. It\nis prominently needed after the initial configuration to properly initialize\nall items by forcing all their scripts to run"
    },
    {
      "type": "list",
      "ordered": false,
      "items": [
        "Events and ScriptingCreating custom eventsTriggering custom eventsForcing all shell scripts to run and the bar to refresh",
        "Creating custom events",
        "Triggering custom events",
        "Forcing all shell scripts to run and the bar to refresh"
      ]
    },
    {
      "type": "list",
      "ordered": false,
      "items": [
        "Creating custom events",
        "Triggering custom events",
        "Forcing all shell scripts to run and the bar to refresh"
      ]
    },
    {
      "type": "table",
      "headers": [
        "<event>",
        "description",
        "$INFO"
      ],
      "rows": [
        {
          "<event>": "front_app_switched",
          "description": "When the front application changes (not triggered if a different window of the same app is focused)",
          "$INFO": "front application name"
        },
        {
          "<event>": "space_change",
          "description": "When the active mission control space changes",
          "$INFO": "JSON for active spaces on all displays"
        },
        {
          "<event>": "space_windows_change",
          "description": "When a window is created or destroyed on a space",
          "$INFO": "JSON containing the space and all app windows on this space"
        },
        {
          "<event>": "display_change",
          "description": "When the active display is changed",
          "$INFO": "new active display id"
        },
        {
          "<event>": "volume_change",
          "description": "When the system audio volume is changed",
          "$INFO": "new volume in percent"
        },
        {
          "<event>": "brightness_change",
          "description": "When a displays brightness is changed",
          "$INFO": "new brightness in percent"
        },
        {
          "<event>": "power_source_change",
          "description": "When the devices power source is changed",
          "$INFO": "new power source (ACorBATTERY)"
        },
        {
          "<event>": "wifi_change",
          "description": "When the device connects of disconnects from wifi",
          "$INFO": "new WiFi SSID or empty on disconnect (not working on Sonoma)"
        },
        {
          "<event>": "media_change",
          "description": "When a change in now playing media is performed (experimental)",
          "$INFO": "media info in a JSON structure"
        },
        {
          "<event>": "system_will_sleep",
          "description": "When the system prepares to sleep",
          "$INFO": ""
        },
        {
          "<event>": "system_woke",
          "description": "When the system has awaken from sleep",
          "$INFO": ""
        },
        {
          "<event>": "mouse.entered",
          "description": "When the mouse enters over an item",
          "$INFO": ""
        },
        {
          "<event>": "mouse.exited",
          "description": "When the mouse leaves an item",
          "$INFO": ""
        },
        {
          "<event>": "mouse.entered.global",
          "description": "When the mouse enters overanypart of the bar",
          "$INFO": ""
        },
        {
          "<event>": "mouse.exited.global",
          "description": "When the mouse leavesallparts of the bar",
          "$INFO": ""
        },
        {
          "<event>": "mouse.clicked",
          "description": "When an item is clicked",
          "$INFO": "mouse button and modifier info"
        },
        {
          "<event>": "mouse.scrolled",
          "description": "When the mouse is scrolled over an item",
          "$INFO": "scroll wheel delta"
        },
        {
          "<event>": "mouse.scrolled.global",
          "description": "When the mouse is scrolled over an empty region of the bar",
          "$INFO": "scroll wheel delta"
        }
      ]
    },
    {
      "type": "code",
      "content": "sketchybar --subscribe<name><event>...<event>"
    },
    {
      "type": "code",
      "content": "$NAME$SENDER$CONFIG_DIR"
    },
    {
      "type": "code",
      "content": "$BUTTON$MODIFIER"
    },
    {
      "type": "code",
      "content": "sketchybar --add event<name>[optional:<NSDistributedNotificationName>]"
    },
    {
      "type": "code",
      "content": "sketchybar --trigger<event>[Optional:<envvar>=<value>...<envvar>=<value>]"
    },
    {
      "type": "code",
      "content": "sketchybar --trigger demoVAR=Test"
    },
    {
      "type": "code",
      "content": "sketchybar --update"
    }
  ]
}