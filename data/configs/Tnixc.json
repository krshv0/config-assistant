{
  "repo_name": "Tnixc",
  "structure": {
    "init.lua": {
      "path": "init.lua",
      "language": "lua",
      "dependencies": [],
      "content": "-- Require the sketchybar module\nsbar = require(\"sketchybar\")\n\n-- Set the bar name, if you are using another bar instance than sketchybar\n-- sbar.set_bar_name(\"bottom_bar\")\n\n-- Bundle the entire initial configuration into a single message to sketchybar\nsbar.begin_config()\nrequire(\"bar\")\nrequire(\"default\")\nrequire(\"items\")\nsbar.end_config()\n\n-- Run the event loop of the sketchybar module (without this there will be no\n-- callback functions executed in the lua module)\nsbar.event_loop()\n",
      "purpose": "",
      "content_summary": ""
    },
    "colors.lua": {
      "path": "colors.lua",
      "language": "lua",
      "dependencies": [],
      "content": "return {\n  black = 0xff25273A,\n  white = 0xffb5c9ff,\n  red = 0xffFF6C8D,\n  green = 0xff90D05A,\n  blue = 0xff6EA3FE,\n  yellow = 0xffE9AD5B,\n  orange = 0xffFF9856,\n  magenta = 0xffC198FD,\n  grey = 0xff9AA9D9,\n  transparent = 0x00000000,\n\n  bar = {\n    bg = 0x00ffffff,\n    border = 0x00ffffff,\n  },\n  popup = {\n    bg = 0xee25273A,\n    border = 0xff1E2030,\n  },\n  bg1 = 0xff25273A,\n  bg2 = 0xff1E2030,\n\n  with_alpha = function(color, alpha)\n    if alpha > 1.0 or alpha < 0.0 then return color end\n    return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)\n  end,\n}\n",
      "purpose": "",
      "content_summary": ""
    },
    "settings.lua": {
      "path": "settings.lua",
      "language": "lua",
      "dependencies": [],
      "content": "return {\n  paddings = 3,\n  group_paddings = 5,\n\n  icons = \"sf-symbols\", -- alternatively available: NerdFont\n\n  -- This is a font configuration for SF Pro and SF Mono (installed manually)\n  font = require(\"helpers.default_font\"),\n\n  -- Alternatively, this is a font config for JetBrainsMono Nerd Font\n  -- font = {\n  --   text = \"JetBrainsMono Nerd Font\", -- Used for text\n  --   numbers = \"JetBrainsMono Nerd Font\", -- Used for numbers\n  --   style_map = {\n  --     [\"Regular\"] = \"Regular\",\n  --     [\"Semibold\"] = \"Medium\",\n  --     [\"Bold\"] = \"SemiBold\",\n  --     [\"Heavy\"] = \"Bold\",\n  --     [\"Black\"] = \"ExtraBold\",\n  --   },\n  -- },\n}\n",
      "purpose": "",
      "content_summary": ""
    },
    "sketchybarrc": {
      "path": "sketchybarrc",
      "language": "bash",
      "dependencies": [],
      "content": "#!/usr/bin/env lua\n\n-- Load the sketchybar-package and prepare the helper binaries\nrequire(\"helpers\")\nrequire(\"init\")\n",
      "purpose": "",
      "content_summary": ""
    },
    "icons.lua": {
      "path": "icons.lua",
      "language": "lua",
      "dependencies": [],
      "content": "local settings = require(\"settings\")\n\nlocal icons = {\n  sf_symbols = {\n    plus = \"\udbc0\udd7c\",\n    loading = \"\udbc1\udd87\",\n    apple = \"\udbc2\udcfa\",\n    gear = \"\udbc0\udf5f\",\n    cpu = \"\udbc2\udee5\",\n    clipboard = \"\udbc0\ude44\",\n\n    switch = {\n      on = \"\udbc4\udfee\",\n      off = \"\udbc4\udfef\",\n    },\n    volume = {\n      _100=\"\udbc0\udea9\",\n      _66=\"\udbc0\udea7\",\n      _33=\"\udbc0\udea5\",\n      _10=\"\udbc0\udea1\",\n      _0=\"\udbc0\udea3\",\n    },\n    battery = {\n        _100 = \"\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\",\n        _80 = \"\u25a0\u25a0\u25a0\u25a0\u25a1\",\n        _60 = \"\u25a0\u25a0\u25a0\u25a1\u25a1\",\n        _40 = \"\u25a0\u25a0\u25a1\u25a1\u25a1\",\n        _20 = \"\u25a0\u25a1\u25a1\u25a1\u25a1\",\n        _0 = \"\u25e7\u25a1\u25a1\u25a1\u25a1\",\n    charging = \"charging\"\n    },\n    wifi = {\n      upload = \"\udbc0\udd28\",\n      download = \"\udbc0\udd29\",\n      connected = \"\udbc1\ude47\",\n      disconnected = \"\udbc1\ude48\",\n      router = \"\udbc5\udce4\",\n    },\n    media = {\n      back = \"\udbc0\ude8a\",\n      forward = \"\udbc0\ude8c\",\n      play_pause = \"\udbc0\ude88\",\n    },\n  },\n\n  -- Alternative NerdFont icons\n  nerdfont = {\n    plus = \"\uf067\",\n    loading = \"\uf252\",\n    apple = \"\uf179\",\n    gear = \"\uf013\",\n    cpu = \"\uf4bc\",\n    clipboard = \"Missing Icon\",\n\n    switch = {\n      on = \"\udb86\ude25\",\n      off = \"\udb86\ude26\",\n    },\n    volume = {\n      _100=\"\uf028\",\n      _66=\"\uf028\",\n      _33=\"\uf027\",\n      _10=\"\uf027\",\n      _0=\"\uf026\",\n    },\n    battery = {\n      _100 = \"\uf240\",\n      _75 = \"\uf241\",\n      _50 = \"\uf242\",\n      _25 = \"\uf243\",\n      _0 = \"\uf244\",\n      charging = \"\uf0e7\"\n    },\n    wifi = {\n      upload = \"\ueaa1\",\n      download = \"\uea9a\",\n      connected = \"\udb81\udda9\",\n      disconnected = \"\udb81\uddaa\",\n      router = \"Missing Icon\"\n    },\n    media = {\n      back = \"\uf04a\",\n      forward = \"\uf04e\",\n      play_pause = \"\uf04c\",\n    },\n  },\n}\n\nif not (settings.icons == \"NerdFont\") then\n  return icons.sf_symbols\nelse\n  return icons.nerdfont\nend\n",
      "purpose": "",
      "content_summary": ""
    },
    "bar.lua": {
      "path": "bar.lua",
      "language": "lua",
      "dependencies": [],
      "content": "local colors = require(\"colors\")\n\n-- Equivalent to the --bar domain\nsbar.bar({\n  topmost = \"window\",\n  height = 50,\n  color = colors.bar.bg,\n  padding_right = 3,\n  padding_left = 3,\n})\n",
      "purpose": "",
      "content_summary": ""
    },
    "default.lua": {
      "path": "default.lua",
      "language": "lua",
      "dependencies": [],
      "content": "local settings = require(\"settings\")\nlocal colors = require(\"colors\")\n\n-- Equivalent to the --default domain\nsbar.default({\n  updates = \"when_shown\",\n  icon = {\n    font = {\n      family = settings.font.text,\n      style = settings.font.style_map[\"Bold\"],\n      size = 14.0\n    },\n    color = colors.white,\n    padding_left = settings.paddings,\n    padding_right = settings.paddings,\n    background = { image = { corner_radius = 9 } },\n  },\n  label = {\n    font = {\n      family = settings.font.text,\n      style = settings.font.style_map[\"Semibold\"],\n      size = 13.0\n    },\n    color = colors.white,\n    padding_left = settings.paddings,\n    padding_right = settings.paddings,\n  },\n  background = {\n    height = 34,\n    corner_radius = 12,\n    border_width = 0,\n    border_color = colors.bg2,\n    image = {\n      corner_radius = 9,\n      border_color = colors.grey,\n      border_width = 0\n    }\n  },\n  popup = {\n    background = {\n      border_width = 0,\n      corner_radius = 9,\n      border_color = colors.popup.border,\n      color = colors.popup.bg,\n      shadow = { drawing = true },\n    },\n    blur_radius = 50,\n  },\n  padding_left = 5,\n  padding_right = 5,\n  scroll_texts = true,\n})\n",
      "purpose": "",
      "content_summary": ""
    },
    "items/spaces.lua": {
      "path": "items/spaces.lua",
      "language": "lua",
      "dependencies": [],
      "content": "local colors = require(\"colors\")\nlocal icons = require(\"icons\")\nlocal settings = require(\"settings\")\nlocal app_icons = require(\"helpers.app_icons\")\n\nlocal spaces = {}\n\nfor i = 1, 10, 1 do\n  local space = sbar.add(\"space\", \"space.\" .. i, {\n    space = i,\n    icon = {\n      font = { family = settings.font.numbers },\n      string = i,\n      padding_left = 15,\n      padding_right = 8,\n      color = colors.white,\n      highlight_color = colors.red,\n    },\n    label = {\n      padding_right = 20,\n      color = colors.grey,\n      highlight_color = colors.white,\n      font = \"sketchybar-app-font:Regular:16.0\",\n      y_offset = -1,\n    },\n    padding_right = 1,\n    padding_left = 1,\n    background = {\n      color = colors.bg1,\n      border_width = 3,\n      border_color = colors.transparent,\n    },\n    popup = { background = { border_width = 5, border_color = colors.black } }\n  })\n\n  spaces[i] = space\n\n  -- Padding space\n  sbar.add(\"space\", \"space.padding.\" .. i, {\n    space = i,\n    script = \"\",\n    width = settings.group_paddings,\n  })\n\n  local space_popup = sbar.add(\"item\", {\n    position = \"popup.\" .. space.name,\n    padding_left= 5,\n    padding_right= 0,\n    background = {\n      drawing = true,\n      image = {\n        corner_radius = 9,\n        scale = 0.2\n      }\n    }\n  })\n\n  space:subscribe(\"space_change\", function(env)\n    local selected = env.SELECTED == \"true\"\n    local color = selected and colors.red or colors.bg2\n    space:set({\n      icon = { highlight = selected, },\n      label = { highlight = selected },\n      background = { border_color = selected and colors.black or colors.bg2 }\n    })\n    space_bracket:set({\n      background = { border_color = selected and colors.black or colors.bg2 }\n    })\n  end)\n\n  space:subscribe(\"mouse.clicked\", function(env)\n    if env.BUTTON == \"other\" then\n      space_popup:set({ background = { image = \"space.\" .. env.SID } })\n      space:set({ popup = { drawing = \"toggle\" } })\n    else\n      local op = (env.BUTTON == \"right\") and \"--destroy\" or \"--focus\"\n      sbar.exec(\"yabai -m space \" .. op .. \" \" .. env.SID)\n    end\n  end)\n\n  space:subscribe(\"mouse.exited\", function(_)\n    space:set({ popup = { drawing = false } })\n  end)\nend\n\nlocal space_window_observer = sbar.add(\"item\", {\n  drawing = false,\n  updates = true,\n})\n\n\nspace_window_observer:subscribe(\"space_windows_change\", function(env)\n  local icon_line = \"\"\n  local no_app = true\n  for app, count in pairs(env.INFO.apps) do\n    no_app = false\n    local lookup = app_icons[app]\n    local icon = ((lookup == nil) and app_icons[\"default\"] or lookup)\n    icon_line = icon_line .. \" \" .. icon\n  end\n\n  if (no_app) then\n    icon_line = \" \u2014\"\n  end\n  sbar.animate(\"tanh\", 10, function()\n    spaces[env.INFO.space]:set({ label = icon_line })\n  end)\nend)\n\n-- spaces_indicator:subscribe(\"swap_menus_and_spaces\", function(env)\n--   local currently_on = spaces_indicator:query().icon.value == icons.switch.on\n--   spaces_indicator:set({\n--     icon = currently_on and icons.switch.off or icons.switch.on\n--   })\n-- end)\n\n-- spaces_indicator:subscribe(\"mouse.entered\", function(env)\n--   sbar.animate(\"tanh\", 30, function()\n--     spaces_indicator:set({\n--       background = {\n--         color = { alpha = 1.0 },\n--         border_color = { alpha = 1.0 },\n--       },\n--       icon = { color = colors.bg1 },\n--       label = { width = \"dynamic\" }\n--     })\n--   end)\n-- end)\n\n-- spaces_indicator:subscribe(\"mouse.exited\", function(env)\n--   sbar.animate(\"tanh\", 30, function()\n--     spaces_indicator:set({\n--       background = {\n--         color = { alpha = 0.0 },\n--         border_color = { alpha = 0.0 },\n--       },\n--       icon = { color = colors.grey },\n--       label = { width = 0, }\n--     })\n--   end)\n-- end)\n\n-- spaces_indicator:subscribe(\"mouse.clicked\", function(env)\n--   sbar.trigger(\"swap_menus_and_spaces\")\n-- end)\n",
      "purpose": "",
      "content_summary": ""
    },
    "items/init.lua": {
      "path": "items/init.lua",
      "language": "lua",
      "dependencies": [],
      "content": "require(\"items.apple\")\nrequire(\"items.menus\")\nrequire(\"items.spaces\")\n-- require(\"items.space_mode\")\nrequire(\"items.calendar\")\nrequire(\"items.widgets\")\nrequire(\"items.media\")\n",
      "purpose": "",
      "content_summary": ""
    },
    "items/apple.lua": {
      "path": "items/apple.lua",
      "language": "lua",
      "dependencies": [],
      "content": "local colors = require(\"colors\")\nlocal icons = require(\"icons\")\nlocal settings = require(\"settings\")\n\n-- Padding item required because of bracket\nsbar.add(\"item\", { width = 5 })\n\nlocal apple = sbar.add(\"item\", {\n  icon = {\n    font = { size = 16.0 },\n    string = icons.apple,\n    padding_right = 12,\n    padding_left = 10,\n  },\n  label = { drawing = false },\n  background = {\n    color = colors.bg2,\n    border_color = colors.black,\n    border_width = 3\n  },\n  padding_left = 1,\n  padding_right = 1,\n  click_script = \"$CONFIG_DIR/helpers/menus/bin/menus -s 0\"\n})\n\n-- Padding item required because of bracket\nsbar.add(\"item\", { width = 7 })\n",
      "purpose": "",
      "content_summary": ""
    },
    "items/menus.lua": {
      "path": "items/menus.lua",
      "language": "lua",
      "dependencies": [],
      "content": "local colors = require(\"colors\")\nlocal icons = require(\"icons\")\nlocal settings = require(\"settings\")\n\nlocal menu_watcher = sbar.add(\"item\", {\n  drawing = false,\n  updates = false,\n})\nlocal space_menu_swap = sbar.add(\"item\", {\n  drawing = false,\n  updates = true,\n})\nsbar.add(\"event\", \"swap_menus_and_spaces\")\n\nlocal max_items = 15\nlocal menu_items = {}\nfor i = 1, max_items, 1 do\n  local menu = sbar.add(\"item\", \"menu.\" .. i, {\n    padding_left = settings.paddings,\n    padding_right = settings.paddings,\n    drawing = false,\n    icon = { drawing = false },\n    label = {\n      font = {\n        style = settings.font.style_map[i == 1 and \"Heavy\" or \"Semibold\"]\n      },\n      padding_left = 6,\n      padding_right = 6,\n    },\n    click_script = \"$CONFIG_DIR/helpers/menus/bin/menus -s \" .. i,\n  })\n\n  menu_items[i] = menu\nend\n\nsbar.add(\"bracket\", { '/menu\\\\..*/' }, {\n  background = { color = colors.bg1 }\n})\n\nlocal menu_padding = sbar.add(\"item\", \"menu.padding\", {\n  drawing = false,\n  width = 5\n})\n\nlocal function update_menus(env)\n  sbar.exec(\"$CONFIG_DIR/helpers/menus/bin/menus -l\", function(menus)\n    sbar.set('/menu\\\\..*/', { drawing = false })\n    menu_padding:set({ drawing = true })\n    id = 1\n    for menu in string.gmatch(menus, '[^\\r\\n]+') do\n      if id < max_items then\n        menu_items[id]:set( { label = menu, drawing = true } )\n      else break end\n      id = id + 1\n    end\n  end)\nend\n\n-- menu_watcher:subscribe(\"front_app_switched\", update_menus)\n\n-- space_menu_swap:subscribe(\"swap_menus_and_spaces\", function(env)\n--   local drawing = menu_items[1]:query().geometry.drawing == \"on\"\n--   if drawing then\n--     menu_watcher:set( { updates = false })\n--     sbar.set(\"/menu\\\\..*/\", { drawing = false })\n--     sbar.set(\"/space\\\\..*/\", { drawing = true })\n--     sbar.set(\"front_app\", { drawing = true })\n--   else\n--     menu_watcher:set( { updates = true })\n--     sbar.set(\"/space\\\\..*/\", { drawing = false })\n--     sbar.set(\"front_app\", { drawing = false })\n--     update_menus()\n--   end\n-- end)\n\nreturn menu_watcher\n",
      "purpose": "",
      "content_summary": ""
    },
    "items/calendar.lua": {
      "path": "items/calendar.lua",
      "language": "lua",
      "dependencies": [],
      "content": "local settings = require(\"settings\")\nlocal colors = require(\"colors\")\n\n-- Padding item required because of bracket\nsbar.add(\"item\", { position = \"right\", width = settings.group_paddings })\n\nlocal cal = sbar.add(\"item\", {\n  icon = {\n    color = colors.white,\n    padding_left = 12,\n    font = {\n      style = settings.font.style_map[\"Bold\"],\n      size = 14.0,\n    },\n  },\n  label = {\n    color = colors.white,\n    padding_right = 16,\n    width = 70,\n    align = \"right\",\n    font = { family = settings.font.numbers },\n  },\n  position = \"right\",\n  update_freq = 30,\n  padding_left = 1,\n  padding_right = 1,\n  background = {\n    color = colors.bg2,\n    border_color = colors.black,\n    border_width = 3\n  },\n})\n\n-- Double border for calendar using a single item bracket\nsbar.add(\"bracket\", { cal.name }, {\n  background = {\n    color = colors.transparent,\n    border_color = colors.grey,\n  }\n})\n\n-- Padding item required because of bracket\nsbar.add(\"item\", { position = \"right\", width = settings.group_paddings })\n\ncal:subscribe({ \"forced\", \"routine\", \"system_woke\" }, function(env)\n  cal:set({ icon = os.date(\"\udbc0\ude49 %A %d %B\"), label = os.date(\" \udbc1\udc2b %H:%M\") })\nend)\n",
      "purpose": "",
      "content_summary": ""
    },
    "items/media.lua": {
      "path": "items/media.lua",
      "language": "lua",
      "dependencies": [],
      "content": "local icons = require(\"icons\")\nlocal colors = require(\"colors\")\n\nlocal whitelist = { [\"Spotify\"] = true,\n                    [\"Music\"] = true    };\n\nlocal media_cover = sbar.add(\"item\", {\n  position = \"right\",\n  background = {\n    image = {\n      string = \"media.artwork\",\n      scale = 0.85,\n    },\n    color = colors.transparent,\n  },\n  label = { drawing = false },\n  icon = { drawing = false },\n  drawing = false,\n  updates = true,\n  popup = {\n    align = \"center\",\n    horizontal = true,\n  }\n})\n\nlocal media_artist = sbar.add(\"item\", {\n  position = \"right\",\n  drawing = false,\n  padding_left = 3,\n  padding_right = 0,\n  width = 0,\n  icon = { drawing = false },\n  label = {\n    width = 0,\n    font = { size = 9 },\n    color = colors.with_alpha(colors.white, 0.6),\n    max_chars = 18,\n    y_offset = 6,\n  },\n})\n\nlocal media_title = sbar.add(\"item\", {\n  position = \"right\",\n  drawing = false,\n  padding_left = 3,\n  padding_right = 0,\n  icon = { drawing = false },\n  label = {\n    font = { size = 11 },\n    width = 0,\n    max_chars = 16,\n    y_offset = -5,\n  },\n})\n\nsbar.add(\"item\", {\n  position = \"popup.\" .. media_cover.name,\n  icon = { string = icons.media.back },\n  label = { drawing = false },\n  click_script = \"nowplaying-cli previous\",\n})\nsbar.add(\"item\", {\n  position = \"popup.\" .. media_cover.name,\n  icon = { string = icons.media.play_pause },\n  label = { drawing = false },\n  click_script = \"nowplaying-cli togglePlayPause\",\n})\nsbar.add(\"item\", {\n  position = \"popup.\" .. media_cover.name,\n  icon = { string = icons.media.forward },\n  label = { drawing = false },\n  click_script = \"nowplaying-cli next\",\n})\n\nlocal interrupt = 0\nlocal function animate_detail(detail)\n  if (not detail) then interrupt = interrupt - 1 end\n  if interrupt > 0 and (not detail) then return end\n\n  sbar.animate(\"tanh\", 30, function()\n    media_artist:set({ label = { width = detail and \"dynamic\" or 0 } })\n    media_title:set({ label = { width = detail and \"dynamic\" or 0 } })\n  end)\nend\n\nmedia_cover:subscribe(\"media_change\", function(env)\n  if whitelist[env.INFO.app] then\n    local drawing = (env.INFO.state == \"playing\")\n    media_artist:set({ drawing = drawing, label = env.INFO.artist, })\n    media_title:set({ drawing = drawing, label = env.INFO.title, })\n    media_cover:set({ drawing = drawing })\n\n    if drawing then\n      animate_detail(true)\n      interrupt = interrupt + 1\n      sbar.delay(5, animate_detail)\n    else\n      media_cover:set({ popup = { drawing = false } })\n    end\n  end\nend)\n\nmedia_cover:subscribe(\"mouse.entered\", function(env)\n  interrupt = interrupt + 1\n  animate_detail(true)\nend)\n\nmedia_cover:subscribe(\"mouse.exited\", function(env)\n  animate_detail(false)\nend)\n\nmedia_cover:subscribe(\"mouse.clicked\", function(env)\n  media_cover:set({ popup = { drawing = \"toggle\" }})\nend)\n\nmedia_title:subscribe(\"mouse.exited.global\", function(env)\n  media_cover:set({ popup = { drawing = false }})\nend)\n",
      "purpose": "",
      "content_summary": ""
    },
    "items/widgets/wifi.lua": {
      "path": "items/widgets/wifi.lua",
      "language": "lua",
      "dependencies": [],
      "content": "local icons = require(\"icons\")\nlocal colors = require(\"colors\")\nlocal settings = require(\"settings\")\n\n-- Execute the event provider binary which provides the event \"network_update\"\n-- for the network interface \"en0\", which is fired every 2.0 seconds.\nsbar.exec(\"killall network_load >/dev/null; $CONFIG_DIR/helpers/event_providers/network_load/bin/network_load en0 network_update 2.0\")\n\nlocal popup_width = 250\n\nlocal wifi_up = sbar.add(\"item\", \"widgets.wifi1\", {\n  position = \"right\",\n  padding_left = -5,\n  width = 0,\n  icon = {\n    padding_right = 0,\n    font = {\n      style = settings.font.style_map[\"Bold\"],\n      size = 9.0,\n    },\n    string = icons.wifi.upload,\n  },\n  label = {\n    font = {\n      family = settings.font.mono,\n      style = settings.font.style_map[\"Bold\"],\n      size = 9.0,\n    },\n    color = colors.red,\n    string = \"??? Bps\",\n  },\n  y_offset = 4,\n})\n\nlocal wifi_down = sbar.add(\"item\", \"widgets.wifi2\", {\n  position = \"right\",\n  padding_left = -5,\n  icon = {\n    padding_right = 0,\n    font = {\n      style = settings.font.style_map[\"Bold\"],\n      size = 9.0,\n    },\n    string = icons.wifi.download,\n  },\n  label = {\n    font = {\n        family = settings.font.mono,\n      style = settings.font.style_map[\"Bold\"],\n      size = 9.0,\n    },\n    color = colors.blue,\n    string = \"??? Bps\",\n  },\n  y_offset = -4,\n})\n\nlocal wifi = sbar.add(\"item\", \"widgets.wifi.padding\", {\n  position = \"right\",\n  label = { drawing = true, string = [[HERE]] },\n})\n\n-- Background around the item\nlocal wifi_bracket = sbar.add(\"bracket\", \"widgets.wifi.bracket\", {\n  wifi.name,\n  wifi_up.name,\n  wifi_down.name\n}, {\n  background = { color = colors.bg1 },\n  popup = { align = \"center\", height = 30 }\n})\n\nlocal ssid = sbar.add(\"item\", {\n  position = \"popup.\" .. wifi_bracket.name,\n  icon = {\n    font = {\n      style = settings.font.style_map[\"Bold\"]\n    },\n    string = icons.wifi.router,\n  },\n  width = popup_width,\n  align = \"center\",\n  label = {\n    font = {\n      size = 15,\n      style = settings.font.style_map[\"Bold\"]\n    },\n    max_chars = 18,\n    string = \"????????????\",\n  },\n  background = {\n    height = 2,\n    color = colors.grey,\n    y_offset = -15\n  }\n})\n\nlocal hostname = sbar.add(\"item\", {\n  position = \"popup.\" .. wifi_bracket.name,\n  icon = {\n    align = \"left\",\n    string = \"Hostname:\",\n    width = popup_width / 2,\n  },\n  label = {\n    max_chars = 20,\n    string = \"????????????\",\n    width = popup_width / 2,\n    align = \"right\",\n  }\n})\n\nlocal ip = sbar.add(\"item\", {\n  position = \"popup.\" .. wifi_bracket.name,\n  icon = {\n    align = \"left\",\n    string = \"IP:\",\n    width = popup_width / 2,\n  },\n  label = {\n    string = \"???.???.???.???\",\n    width = popup_width / 2,\n    align = \"right\",\n  }\n})\n\nlocal mask = sbar.add(\"item\", {\n  position = \"popup.\" .. wifi_bracket.name,\n  icon = {\n    align = \"left\",\n    string = \"Subnet mask:\",\n    width = popup_width / 2,\n  },\n  label = {\n    string = \"???.???.???.???\",\n    width = popup_width / 2,\n    align = \"right\",\n  }\n})\n\nlocal router = sbar.add(\"item\", {\n  position = \"popup.\" .. wifi_bracket.name,\n  icon = {\n    align = \"left\",\n    string = \"Router:\",\n    width = popup_width / 2,\n  },\n  label = {\n    string = \"???.???.???.???\",\n    width = popup_width / 2,\n    align = \"right\",\n  },\n})\n\nsbar.add(\"item\", { position = \"right\", width = settings.group_paddings })\n\nwifi_up:subscribe(\"network_update\", function(env)\n  local up_color = (env.upload == \"000 Bps\") and colors.grey or colors.red\n  local down_color = (env.download == \"000 Bps\") and colors.grey or colors.blue\n  wifi_up:set({\n    icon = { color = up_color },\n    label = {\n      string = env.upload,\n      color = up_color\n    }\n  })\n  wifi_down:set({\n    icon = { color = down_color },\n    label = {\n      string = env.download,\n      color = down_color\n    }\n  })\nend)\n\nwifi:subscribe({\"wifi_change\", \"system_woke\"}, function(env)\n  sbar.exec(\"ipconfig getifaddr en0\", function(ip)\n    local connected = not (ip == \"\")\n    wifi:set({\n      icon = {\n        string = connected and icons.wifi.connected or icons.wifi.disconnected,\n        color = connected and colors.white or colors.red,\n      },\n    })\n    if connected then\n      sbar.exec(\"ipconfig getsummary en0 | awk -F ' SSID : '  '/ SSID : / {print $2}'\", function(ssid_result)\n        wifi:set({\n          label = { string = ssid_result }\n        })\n      end)\n    else\n      wifi:set({\n        label = { string = \"Disconnected\" }\n      })\n    end\n  end)\nend)\n\nlocal function hide_details()\n  wifi_bracket:set({ popup = { drawing = false } })\nend\n\nlocal function toggle_details()\n  local should_draw = wifi_bracket:query().popup.drawing == \"off\"\n  if should_draw then\n    wifi_bracket:set({ popup = { drawing = true }})\n    sbar.exec(\"networksetup -getcomputername\", function(result)\n      hostname:set({ label = result })\n    end)\n    sbar.exec(\"ipconfig getifaddr en0\", function(result)\n      ip:set({ label = result })\n    end)\n    sbar.exec(\"ipconfig getsummary en0 | awk -F ' SSID : '  '/ SSID : / {print $2}'\", function(result)\n      ssid:set({ label = result })\n    end)\n    sbar.exec(\"networksetup -getinfo Wi-Fi | awk -F 'Subnet mask: ' '/^Subnet mask: / {print $2}'\", function(result)\n      mask:set({ label = result })\n    end)\n    sbar.exec(\"networksetup -getinfo Wi-Fi | awk -F 'Router: ' '/^Router: / {print $2}'\", function(result)\n      router:set({ label = result })\n    end)\n  else\n    hide_details()\n  end\nend\n\nwifi_up:subscribe(\"mouse.clicked\", toggle_details)\nwifi_down:subscribe(\"mouse.clicked\", toggle_details)\nwifi:subscribe(\"mouse.clicked\", toggle_details)\nwifi:subscribe(\"mouse.exited.global\", hide_details)\n\nlocal function copy_label_to_clipboard(env)\n  local label = sbar.query(env.NAME).label.value\n  sbar.exec(\"echo \\\"\" .. label .. \"\\\" | pbcopy\")\n  sbar.set(env.NAME, { label = { string = icons.clipboard, align=\"center\" } })\n  sbar.delay(1, function()\n    sbar.set(env.NAME, { label = { string = label, align = \"right\" } })\n  end)\nend\n\nssid:subscribe(\"mouse.clicked\", copy_label_to_clipboard)\nhostname:subscribe(\"mouse.clicked\", copy_label_to_clipboard)\nip:subscribe(\"mouse.clicked\", copy_label_to_clipboard)\nmask:subscribe(\"mouse.clicked\", copy_label_to_clipboard)\nrouter:subscribe(\"mouse.clicked\", copy_label_to_clipboard)",
      "purpose": "",
      "content_summary": ""
    },
    "items/widgets/cpu.lua": {
      "path": "items/widgets/cpu.lua",
      "language": "lua",
      "dependencies": [],
      "content": "local icons = require(\"icons\")\nlocal colors = require(\"colors\")\nlocal settings = require(\"settings\")\n\n-- Execute the event provider binary which provides the event \"cpu_update\" for\n-- the cpu load data, which is fired every 2.0 seconds.\nsbar.exec(\"killall cpu_load >/dev/null; $CONFIG_DIR/helpers/event_providers/cpu_load/bin/cpu_load cpu_update 2.0\")\n\nlocal cpu = sbar.add(\"graph\", \"widgets.cpu\" , 62, {\n  position = \"right\",\n  graph = { color = colors.blue },\n  background = {\n    height = 22,\n    color = { alpha = 0 },\n    border_color = { alpha = 0 },\n    drawing = true,\n  },\n  icon = { string = icons.cpu },\n  label = {\n    string = \"cpu ??%\",\n    font = {\n      family = settings.font.numbers,\n      style = settings.font.style_map[\"Bold\"],\n      size = 9.0,\n    },\n    align = \"right\",\n    padding_right = 0,\n    width = 0,\n    y_offset = 4\n  },\n  padding_right = settings.paddings + 6\n})\n\ncpu:subscribe(\"cpu_update\", function(env)\n  -- Also available: env.user_load, env.sys_load\n  local load = tonumber(env.total_load)\n  cpu:push({ load / 100. })\n\n  local color = colors.blue\n  if load > 30 then\n    if load < 60 then\n      color = colors.yellow\n    elseif load < 80 then\n      color = colors.orange\n    else\n      color = colors.red\n    end\n  end\n\n  cpu:set({\n    graph = { color = color },\n    label = \"cpu \" .. env.total_load .. \"%\",\n  })\nend)\n\ncpu:subscribe(\"mouse.clicked\", function(env)\n  sbar.exec(\"open -a 'Activity Monitor'\")\nend)\n\n-- Background around the cpu item\nsbar.add(\"bracket\", \"widgets.cpu.bracket\", { cpu.name }, {\n  background = { color = colors.bg1 }\n})\n\n-- Background around the cpu item\nsbar.add(\"item\", \"widgets.cpu.padding\", {\n  position = \"right\",\n  width = settings.group_paddings\n})\n",
      "purpose": "",
      "content_summary": ""
    },
    "items/widgets/init.lua": {
      "path": "items/widgets/init.lua",
      "language": "lua",
      "dependencies": [],
      "content": "require(\"items.widgets.battery\")\nrequire(\"items.widgets.volume\")\nrequire(\"items.widgets.wifi\")\nrequire(\"items.widgets.cpu\")\n",
      "purpose": "",
      "content_summary": ""
    },
    "items/widgets/battery.lua": {
      "path": "items/widgets/battery.lua",
      "language": "lua",
      "dependencies": [],
      "content": "local icons = require(\"icons\")\nlocal colors = require(\"colors\")\nlocal settings = require(\"settings\")\n\nlocal battery = sbar.add(\"item\", \"widgets.battery\", {\n  position = \"right\",\n  icon = {\n    font = {\n      style = settings.font.style_map[\"Regular\"],\n      size = 12.0,\n    }\n  },\n  label = { font = { family = settings.font.numbers } },\n  update_freq = 180,\n  popup = { align = \"center\" }\n})\n\nlocal remaining_time = sbar.add(\"item\", {\n  position = \"popup.\" .. battery.name,\n  icon = {\n    string = \"Time remaining:\",\n    width = 100,\n    align = \"left\"\n  },\n  label = {\n    string = \"??:??h\",\n    width = 100,\n    align = \"right\"\n  },\n})\n\n\nbattery:subscribe({\"routine\", \"power_source_change\", \"system_woke\"}, function()\n  sbar.exec(\"pmset -g batt\", function(batt_info)\n    local icon = \"!\"\n    local label = \"?\"\n\n    local found, _, charge = batt_info:find(\"(%d+)%%\")\n    if found then\n      charge = tonumber(charge)\n      label = charge .. \"%\"\n    end\n\n    local color = colors.green\n    local charging, _, _ = batt_info:find(\"AC Power\")\n\n    if charging then\n      icon = icons.battery.charging\n    else\n    if found and charge == 0 then\n      icon = icons.battery._0\n      color = colors.red\n    elseif found and charge <= 20 then\n      icon = icons.battery._20\n      color = colors.orange\n    elseif found and charge <= 40 then\n      icon = icons.battery._40\n    elseif found and charge <= 60 then\n      icon = icons.battery._60\n    elseif found and charge <= 80 then\n      icon = icons.battery._80\n    elseif found and charge <= 100 then\n      icon = icons.battery._100\n    else\n      icon = icons.battery._0\n      color = colors.red\n    end\n    end\n\n    local lead = \"\"\n    if found and charge < 10 then\n      lead = \"0\"\n    end\n\n    battery:set({\n      icon = {\n        string = icon,\n        color = color\n      },\n      label = { string = lead .. label },\n    })\n  end)\nend)\n\nbattery:subscribe(\"mouse.clicked\", function(env)\n  local drawing = battery:query().popup.drawing\n  battery:set( { popup = { drawing = \"toggle\" } })\n\n  if drawing == \"off\" then\n    sbar.exec(\"pmset -g batt\", function(batt_info)\n      local found, _, remaining = batt_info:find(\" (%d+:%d+) remaining\")\n      local label = found and remaining .. \"h\" or \"No estimate\"\n      remaining_time:set( { label = label })\n    end)\n  end\nend)\n\nsbar.add(\"bracket\", \"widgets.battery.bracket\", { battery.name }, {\n  background = { color = colors.bg1 }\n})\n\nsbar.add(\"item\", \"widgets.battery.padding\", {\n  position = \"right\",\n  width = settings.group_paddings\n})\n",
      "purpose": "",
      "content_summary": ""
    },
    "items/widgets/volume.lua": {
      "path": "items/widgets/volume.lua",
      "language": "lua",
      "dependencies": [],
      "content": "local colors = require(\"colors\")\nlocal icons = require(\"icons\")\nlocal settings = require(\"settings\")\n\nlocal popup_width = 250\n\nlocal volume_percent = sbar.add(\"item\", \"widgets.volume1\", {\n  position = \"right\",\n  icon = { drawing = false },\n  label = {\n    string = \"??%\",\n    padding_left = -1,\n    font = { family = settings.font.numbers }\n  },\n})\n\nlocal volume_icon = sbar.add(\"item\", \"widgets.volume2\", {\n  position = \"right\",\n  padding_right = -1,\n  icon = {\n    string = icons.volume._100,\n    width = 0,\n    align = \"left\",\n    color = colors.grey,\n    font = {\n      style = settings.font.style_map[\"Regular\"],\n      size = 14.0,\n    },\n  },\n  label = {\n    width = 25,\n    align = \"left\",\n    font = {\n      style = settings.font.style_map[\"Regular\"],\n      size = 14.0,\n    },\n  },\n})\n\nlocal volume_bracket = sbar.add(\"bracket\", \"widgets.volume.bracket\", {\n  volume_icon.name,\n  volume_percent.name\n}, {\n  background = { color = colors.bg1 },\n  popup = { align = \"center\" }\n})\n\nsbar.add(\"item\", \"widgets.volume.padding\", {\n  position = \"right\",\n  width = settings.group_paddings\n})\n\nlocal volume_slider = sbar.add(\"slider\", popup_width, {\n  position = \"popup.\" .. volume_bracket.name,\n  slider = {\n    highlight_color = colors.blue,\n    background = {\n      height = 6,\n      corner_radius = 3,\n      color = colors.bg2,\n    },\n    knob= {\n      string = \"\udbc0\udc01\",\n      drawing = true,\n    },\n  },\n  background = { color = colors.bg1, height = 2, y_offset = -20 },\n  click_script = 'osascript -e \"set volume output volume $PERCENTAGE\"'\n})\n\nvolume_percent:subscribe(\"volume_change\", function(env)\n  local volume = tonumber(env.INFO)\n  local icon = icons.volume._0\n  if volume > 60 then\n    icon = icons.volume._100\n  elseif volume > 30 then\n    icon = icons.volume._66\n  elseif volume > 10 then\n    icon = icons.volume._33\n  elseif volume > 0 then\n    icon = icons.volume._10\n  end\n\n  local lead = \"\"\n  if volume < 10 then\n    lead = \"0\"\n  end\n\n  volume_icon:set({ label = icon })\n  volume_percent:set({ label = lead .. volume .. \"%\" })\n  volume_slider:set({ slider = { percentage = volume } })\nend)\n\nlocal function volume_collapse_details()\n  local drawing = volume_bracket:query().popup.drawing == \"on\"\n  if not drawing then return end\n  volume_bracket:set({ popup = { drawing = false } })\n  sbar.remove('/volume.device\\\\.*/')\nend\n\nlocal current_audio_device = \"None\"\nlocal function volume_toggle_details(env)\n  if env.BUTTON == \"right\" then\n    sbar.exec(\"open /System/Library/PreferencePanes/Sound.prefpane\")\n    return\n  end\n\n  local should_draw = volume_bracket:query().popup.drawing == \"off\"\n  if should_draw then\n    volume_bracket:set({ popup = { drawing = true } })\n    sbar.exec(\"SwitchAudioSource -t output -c\", function(result)\n      current_audio_device = result:sub(1, -2)\n      sbar.exec(\"SwitchAudioSource -a -t output\", function(available)\n        current = current_audio_device\n        local color = colors.grey\n        local counter = 0\n\n        for device in string.gmatch(available, '[^\\r\\n]+') do\n          local color = colors.grey\n          if current == device then\n            color = colors.white\n          end\n          sbar.add(\"item\", \"volume.device.\" .. counter, {\n            position = \"popup.\" .. volume_bracket.name,\n            width = popup_width,\n            align = \"center\",\n            label = { string = device, color = color },\n            click_script = 'SwitchAudioSource -s \"' .. device .. '\" && sketchybar --set /volume.device\\\\.*/ label.color=' .. colors.grey .. ' --set $NAME label.color=' .. colors.white\n\n          })\n          counter = counter + 1\n        end\n      end)\n    end)\n  else\n    volume_collapse_details()\n  end\nend\n\nlocal function volume_scroll(env)\n  local delta = env.SCROLL_DELTA\n  sbar.exec('osascript -e \"set volume output volume (output volume of (get volume settings) + ' .. delta .. ')\"')\nend\n\n-- volume_icon:subscribe(\"mouse.clicked\", volume_toggle_details)\n-- volume_icon:subscribe(\"mouse.scrolled\", volume_scroll)\n-- volume_percent:subscribe(\"mouse.clicked\", volume_toggle_details)\n-- volume_percent:subscribe(\"mouse.exited.global\", volume_collapse_details)\n-- volume_percent:subscribe(\"mouse.scrolled\", volume_scroll)\n\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/init.lua": {
      "path": "helpers/init.lua",
      "language": "lua",
      "dependencies": [],
      "content": "-- Add the sketchybar module to the package cpath\npackage.cpath = package.cpath .. \";/Users/\" .. os.getenv(\"USER\") .. \"/.local/share/sketchybar_lua/?.so\"\n\nos.execute(\"(cd helpers && make)\")\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/makefile": {
      "path": "helpers/makefile",
      "language": "unknown",
      "dependencies": [],
      "content": "all:\n\t(cd event_providers && $(MAKE)) >/dev/null\n\t(cd menus && $(MAKE)) >/dev/null\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/app_icons.lua": {
      "path": "helpers/app_icons.lua",
      "language": "lua",
      "dependencies": [],
      "content": "return {\n  [\"Typora\"] = \":text:\",\n  [\"Orion\"] = \":orion:\",\n  [\"Orion RC\"] = \":orion:\",\n  [\"Grammarly Editor\"] = \":grammarly:\",\n  [\"kitty\"] = \":kitty:\",\n  [\"ClickUp\"] = \":click_up:\",\n  [\"Iris\"] = \":iris:\",\n  [\"PomoDone App\"] = \":pomodone:\",\n  [\"qutebrowser\"] = \":qute_browser:\",\n  [\"Raindrop.io\"] = \":raindrop_io:\",\n  [\"Airmail\"] = \":airmail:\",\n  [\"Affinity Publisher 2\"] = \":affinity_publisher_2:\",\n  [\"Calendar\"] = \":calendar:\",\n  [\"\u65e5\u5386\"] = \":calendar:\",\n  [\"Fantastical\"] = \":calendar:\",\n  [\"Cron\"] = \":calendar:\",\n  [\"Amie\"] = \":calendar:\",\n  [\"Figma\"] = \":figma:\",\n  [\"Element\"] = \":element:\",\n  [\"Signal\"] = \":signal:\",\n  [\"Mattermost\"] = \":mattermost:\",\n  [\"Caprine\"] = \":caprine:\",\n  [\"Microsoft To Do\"] = \":things:\",\n  [\"Things\"] = \":things:\",\n  [\"Godot\"] = \":godot:\",\n  [\"Android Messages\"] = \":android_messages:\",\n  [\"Zed\"] = \":zed:\",\n  [\"Anytype\"] = \":anytype:\",\n  [\"TeamSpeak 3\"] = \":team_speak:\",\n  [\"LibreWolf\"] = \":libre_wolf:\",\n  [\"Neovide\"] = \":neovide:\",\n  [\"neovide\"] = \":neovide:\",\n  [\"Spotlight\"] = \":spotlight:\",\n  [\"\u5fae\u4fe1\"] = \":wechat:\",\n  [\"Dropbox\"] = \":dropbox:\",\n  [\"Transmit\"] = \":transmit:\",\n  [\"TickTick\"] = \":tick_tick:\",\n  [\"Parallels Desktop\"] = \":parallels:\",\n  [\"Audacity\"] = \":audacity:\",\n  [\"Rider\"] = \":rider:\",\n  [\"JetBrains Rider\"] = \":rider:\",\n  [\"DEVONthink 3\"] = \":devonthink3:\",\n  [\"Docker\"] = \":docker:\",\n  [\"Docker Desktop\"] = \":docker:\",\n  [\"Matlab\"] = \":matlab:\",\n  [\"VLC\"] = \":vlc:\",\n  [\"Alacritty\"] = \":alacritty:\",\n  [\"Pages\"] = \":pages:\",\n  [\"Pages \u6587\u7a3f\"] = \":pages:\",\n  [\"Bear\"] = \":bear:\",\n  [\"Pine\"] = \":pine:\",\n  [\"Affinity Designer 2\"] = \":affinity_designer_2:\",\n  [\"Keyboard Maestro\"] = \":keyboard_maestro:\",\n  [\"Joplin\"] = \":joplin:\",\n  [\"mpv\"] = \":mpv:\",\n  [\"zoom.us\"] = \":zoom:\",\n  [\"Affinity Photo 2\"] = \":affinity_photo_2:\",\n  [\"Music\"] = \":music:\",\n  [\"\u97f3\u4e50\"] = \":music:\",\n  [\"League of Legends\"] = \":league_of_legends:\",\n  [\"Tor Browser\"] = \":tor_browser:\",\n  [\"Hyper\"] = \":hyper:\",\n  [\"\u200eWhatsApp\"] = \":whats_app:\",\n  [\"\uce74\uce74\uc624\ud1a1\"] = \":kakaotalk:\",\n  [\"Discord\"] = \":discord:\",\n  [\"Discord Canary\"] = \":discord:\",\n  [\"Discord PTB\"] = \":discord:\",\n  [\"Neovide\"] = \":vim:\",\n  [\"MacVim\"] = \":vim:\",\n  [\"Vim\"] = \":vim:\",\n  [\"VimR\"] = \":vim:\",\n  [\"Keynote\"] = \":keynote:\",\n  [\"Keynote \u8bb2\u6f14\"] = \":keynote:\",\n  [\"iTerm\"] = \":iterm:\",\n  [\"IntelliJ IDEA\"] = \":idea:\",\n  [\"Finder\"] = \":finder:\",\n  [\"\u8bbf\u8fbe\"] = \":finder:\",\n  [\"Xcode\"] = \":xcode:\",\n  [\"GoLand\"] = \":goland:\",\n  [\"Android Studio\"] = \":android_studio:\",\n  [\"MoneyMoney\"] = \":bank:\",\n  [\"Spotify\"] = \":spotify:\",\n  [\"KeePassXC\"] = \":kee_pass_x_c:\",\n  [\"Alfred\"] = \":alfred:\",\n  [\"Color Picker\"] = \":color_picker:\",\n  [\"\u6570\u7801\u6d4b\u8272\u8ba1\"] = \":color_picker:\",\n  [\"Microsoft Word\"] = \":microsoft_word:\",\n  [\"Microsoft PowerPoint\"] = \":microsoft_power_point:\",\n  [\"Notes\"] = \":notes:\",\n  [\"\u5907\u5fd8\u5f55\"] = \":notes:\",\n  [\"Microsoft Edge\"] = \":microsoft_edge:\",\n  [\"Sublime Text\"] = \":sublime_text:\",\n  [\"Sequel Ace\"] = \":sequel_ace:\",\n  [\"Folx\"] = \":folx:\",\n  [\"DingTalk\"] = \":dingtalk:\",\n  [\"\u9489\u9489\"] = \":dingtalk:\",\n  [\"\u963f\u91cc\u9489\"] = \":dingtalk:\",\n  [\"WebStorm\"] = \":web_storm:\",\n  [\"Sequel Pro\"] = \":sequel_pro:\",\n  [\"Skype\"] = \":skype:\",\n  [\"\u7f51\u6613\u4e91\u97f3\u4e50\"] = \":netease_music:\",\n  [\"PyCharm\"] = \":pycharm:\",\n  [\"Canary Mail\"] = \":mail:\",\n  [\"HEY\"] = \":mail:\",\n  [\"Mail\"] = \":mail:\",\n  [\"Mailspring\"] = \":mail:\",\n  [\"MailMate\"] = \":mail:\",\n  [\"\u90ae\u4ef6\"] = \":mail:\",\n  [\"Default\"] = \":default:\",\n  [\"App Store\"] = \":app_store:\",\n  [\"Calibre\"] = \":book:\",\n  [\"Todoist\"] = \":todoist:\",\n  [\"Emacs\"] = \":emacs:\",\n  [\"Messenger\"] = \":messenger:\",\n  [\"Tower\"] = \":tower:\",\n  [\"VSCodium\"] = \":vscodium:\",\n  [\"Drafts\"] = \":drafts:\",\n  [\"Cypress\"] = \":cypress:\",\n  [\"GitHub Desktop\"] = \":git_hub:\",\n  [\"Telegram\"] = \":telegram:\",\n  [\"Firefox Developer Edition\"] = \":firefox_developer_edition:\",\n  [\"Firefox Nightly\"] = \":firefox_developer_edition:\",\n  [\"Min\"] = \":min_browser:\",\n  [\"Sketch\"] = \":sketch:\",\n  [\"Affinity Photo\"] = \":affinity_photo:\",\n  [\"MAMP\"] = \":mamp:\",\n  [\"MAMP PRO\"] = \":mamp:\",\n  [\"Insomnia\"] = \":insomnia:\",\n  [\"Bitwarden\"] = \":bit_warden:\",\n  [\"Warp\"] = \":warp:\",\n  [\"System Preferences\"] = \":gear:\",\n  [\"System Settings\"] = \":gear:\",\n  [\"\u7cfb\u7edf\u8bbe\u7f6e\"] = \":gear:\",\n  [\"Affinity Designer\"] = \":affinity_designer:\",\n  [\"Live\"] = \":ableton:\",\n  [\"Arc\"] = \":arc:\",\n  [\"Chromium\"] = \":google_chrome:\",\n  [\"Google Chrome\"] = \":google_chrome:\",\n  [\"Google Chrome Canary\"] = \":google_chrome:\",\n  [\"Jellyfin Media Player\"] = \":jellyfin:\",\n  [\"Zulip\"] = \":zulip:\",\n  [\"1Password\"] = \":one_password:\",\n  [\"FaceTime\"] = \":face_time:\",\n  [\"FaceTime \u901a\u8bdd\"] = \":face_time:\",\n  [\"Citrix Workspace\"] = \":citrix:\",\n  [\"Citrix Viewer\"] = \":citrix:\",\n  [\"Logseq\"] = \":logseq:\",\n  [\"Reeder\"] = \":reeder5:\",\n  [\"Code\"] = \":code:\",\n  [\"Code - Insiders\"] = \":code:\",\n  [\"Notion\"] = \":notion:\",\n  [\"Final Cut Pro\"] = \":final_cut_pro:\",\n  [\"Zotero\"] = \":zotero:\",\n  [\"Safari\"] = \":safari:\",\n  [\"Safari\u6d4f\u89c8\u5668\"] = \":safari:\",\n  [\"Safari Technology Preview\"] = \":safari:\",\n  [\"Blender\"] = \":blender:\",\n  [\"Affinity Publisher\"] = \":affinity_publisher:\",\n  [\"Spark Desktop\"] = \":spark:\",\n  [\"Zeplin\"] = \":zeplin:\",\n  [\"Replit\"] = \":replit:\",\n  [\"Podcasts\"] = \":podcasts:\",\n  [\"\u64ad\u5ba2\"] = \":podcasts:\",\n  [\"NordVPN\"] = \":nord_vpn:\",\n  [\"Notability\"] = \":notability:\",\n  [\"Numbers\"] = \":numbers:\",\n  [\"Numbers \u8868\u683c\"] = \":numbers:\",\n  [\"Nova\"] = \":nova:\",\n  [\"Microsoft Excel\"] = \":microsoft_excel:\",\n  [\"Trello\"] = \":trello:\",\n  [\"Pi-hole Remote\"] = \":pihole:\",\n  [\"Linear\"] = \":linear:\",\n  [\"CleanMyMac X\"] = \":desktop:\",\n  [\"GrandTotal\"] = \":dollar:\",\n  [\"Receipts\"] = \":dollar:\",\n  [\"Evernote Legacy\"] = \":evernote_legacy:\",\n  [\"OmniFocus\"] = \":omni_focus:\",\n  [\"Terminal\"] = \":terminal:\",\n  [\"\u7ec8\u7aef\"] = \":terminal:\",\n  [\"Atom\"] = \":atom:\",\n  [\"Kakoune\"] = \":kakoune:\",\n  [\"Reminders\"] = \":reminders:\",\n  [\"\u63d0\u9192\u4e8b\u9879\"] = \":reminders:\",\n  [\"Tana\"] = \":tana:\",\n  [\"OBS\"] = \":obsstudio:\",\n  [\"VMware Fusion\"] = \":vmware_fusion:\",\n  [\"Tweetbot\"] = \":twitter:\",\n  [\"Twitter\"] = \":twitter:\",\n  [\"Microsoft Teams\"] = \":microsoft_teams:\",\n  [\"Yuque\"] = \":yuque:\",\n  [\"\u8bed\u96c0\"] = \":yuque:\",\n  [\"Slack\"] = \":slack:\",\n  [\"Vivaldi\"] = \":vivaldi:\",\n  [\"Setapp\"] = \":setapp:\",\n  [\"TIDAL\"] = \":tidal:\",\n  [\"Miro\"] = \":miro:\",\n  [\"Messages\"] = \":messages:\",\n  [\"\u4fe1\u606f\"] = \":messages:\",\n  [\"Nachrichten\"] = \":messages:\",\n  [\"Brave Browser\"] = \":brave_browser:\",\n  [\"Preview\"] = \":pdf:\",\n  [\"\u9884\u89c8\"] = \":pdf:\",\n  [\"Skim\"] = \":pdf:\",\n  [\"zathura\"] = \":pdf:\",\n  [\"Obsidian\"] = \":obsidian:\",\n  [\"Thunderbird\"] = \":thunderbird:\",\n  [\"Firefox\"] = \":firefox:\",\n  [\"WezTerm\"] = \":wezterm:\",\n  [\"default\"] = \":default:\",\n}\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/install.sh": {
      "path": "helpers/install.sh",
      "language": "bash",
      "dependencies": [],
      "content": "# Packages\nbrew install lua\nbrew install switchaudio-osx\nbrew install nowplaying-cli\n\nbrew tap FelixKratz/formulae\nbrew install sketchybar\n\n# Fonts\nbrew install --cask sf-symbols\nbrew install --cask homebrew/cask-fonts/font-sf-mono\nbrew install --cask homebrew/cask-fonts/font-sf-pro\n\ncurl -L https://github.com/kvndrsslr/sketchybar-app-font/releases/download/v2.0.5/sketchybar-app-font.ttf -o $HOME/Library/Fonts/sketchybar-app-font.ttf\n\n# SbarLua\n(git clone https://github.com/FelixKratz/SbarLua.git /tmp/SbarLua && cd /tmp/SbarLua/ && make install && rm -rf /tmp/SbarLua/)\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/default_font.lua": {
      "path": "helpers/default_font.lua",
      "language": "lua",
      "dependencies": [],
      "content": "return {\n  text = \"SF Pro\", -- Used for text\n  numbers = \"SF Pro\", -- Used for numbers\n  mono = \"BerkeleyMono Nerd Font\",\n\n  -- Unified font style map\n  style_map = {\n    [\"Regular\"] = \"Regular\",\n    [\"Semibold\"] = \"Semibold\",\n    [\"Bold\"] = \"Bold\",\n    [\"Heavy\"] = \"Heavy\",\n    [\"Black\"] = \"Black\",\n  }\n}\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/.gitignore": {
      "path": "helpers/.gitignore",
      "language": "unknown",
      "dependencies": [],
      "content": "bin\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/menus/makefile": {
      "path": "helpers/menus/makefile",
      "language": "unknown",
      "dependencies": [],
      "content": "bin/menus: menus.c | bin\n\tclang -std=c99 -O3 -F/System/Library/PrivateFrameworks/ -framework Carbon -framework SkyLight $< -o $@\n\nbin:\n\tmkdir bin\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/menus/menus.c": {
      "path": "helpers/menus/menus.c",
      "language": "unknown",
      "dependencies": [],
      "content": "#include <Carbon/Carbon.h>\n\nvoid ax_init() {\n  const void *keys[] = { kAXTrustedCheckOptionPrompt };\n  const void *values[] = { kCFBooleanTrue };\n\n  CFDictionaryRef options;\n  options = CFDictionaryCreate(kCFAllocatorDefault,\n                               keys,\n                               values,\n                               sizeof(keys) / sizeof(*keys),\n                               &kCFCopyStringDictionaryKeyCallBacks,\n                               &kCFTypeDictionaryValueCallBacks     );\n\n  bool trusted = AXIsProcessTrustedWithOptions(options);\n  CFRelease(options);\n  if (!trusted) exit(1);\n}\n\nvoid ax_perform_click(AXUIElementRef element) {\n  if (!element) return;\n  AXUIElementPerformAction(element, kAXCancelAction);\n  usleep(150000);\n  AXUIElementPerformAction(element, kAXPressAction);\n}\n\nCFStringRef ax_get_title(AXUIElementRef element) {\n  CFTypeRef title = NULL;\n  AXError error = AXUIElementCopyAttributeValue(element,\n                                                kAXTitleAttribute,\n                                                &title            );\n\n  if (error != kAXErrorSuccess) return NULL;\n  return title;\n}\n\nvoid ax_select_menu_option(AXUIElementRef app, int id) {\n  AXUIElementRef menubars_ref = NULL;\n  CFArrayRef children_ref = NULL;\n\n  AXError error = AXUIElementCopyAttributeValue(app,\n                                                kAXMenuBarAttribute,\n                                                (CFTypeRef*)&menubars_ref);\n  if (error == kAXErrorSuccess) {\n    error = AXUIElementCopyAttributeValue(menubars_ref,\n                                          kAXVisibleChildrenAttribute,\n                                          (CFTypeRef*)&children_ref   );\n\n    if (error == kAXErrorSuccess) {\n      uint32_t count = CFArrayGetCount(children_ref);\n      if (id < count) {\n        AXUIElementRef item = CFArrayGetValueAtIndex(children_ref, id);\n        ax_perform_click(item);\n      }\n      if (children_ref) CFRelease(children_ref);\n    }\n    if (menubars_ref) CFRelease(menubars_ref);\n  }\n}\n\nvoid ax_print_menu_options(AXUIElementRef app) {\n  AXUIElementRef menubars_ref = NULL;\n  CFTypeRef menubar = NULL;\n  CFArrayRef children_ref = NULL;\n\n  AXError error = AXUIElementCopyAttributeValue(app,\n                                                kAXMenuBarAttribute,\n                                                (CFTypeRef*)&menubars_ref);\n  if (error == kAXErrorSuccess) {\n    error = AXUIElementCopyAttributeValue(menubars_ref,\n                                          kAXVisibleChildrenAttribute,\n                                          (CFTypeRef*)&children_ref   );\n\n    if (error == kAXErrorSuccess) {\n      uint32_t count = CFArrayGetCount(children_ref);\n\n      for (int i = 1; i < count; i++) {\n        AXUIElementRef item = CFArrayGetValueAtIndex(children_ref, i);\n        CFTypeRef title = ax_get_title(item);\n\n        if (title) {\n          uint32_t buffer_len = 2*CFStringGetLength(title);\n          char buffer[2*CFStringGetLength(title)];\n          CFStringGetCString(title, buffer, buffer_len, kCFStringEncodingUTF8);\n          printf(\"%s\\n\", buffer);\n          CFRelease(title);\n        }\n      }\n    }\n    if (menubars_ref) CFRelease(menubars_ref);\n    if (children_ref) CFRelease(children_ref);\n  }\n}\n\nAXUIElementRef ax_get_extra_menu_item(char* alias) {\n  pid_t pid = 0;\n  CGRect bounds = CGRectNull;\n  CFArrayRef window_list = CGWindowListCopyWindowInfo(kCGWindowListOptionAll,\n                                                      kCGNullWindowID        );\n  char owner_buffer[256];\n  char name_buffer[256];\n  char buffer[512];\n  int window_count = CFArrayGetCount(window_list);\n  for (int i = 0; i < window_count; ++i) {\n    CFDictionaryRef dictionary = CFArrayGetValueAtIndex(window_list, i);\n    if (!dictionary) continue;\n\n    CFStringRef owner_ref = CFDictionaryGetValue(dictionary,\n                                                 kCGWindowOwnerName);\n\n    CFNumberRef owner_pid_ref = CFDictionaryGetValue(dictionary,\n                                                     kCGWindowOwnerPID);\n\n    CFStringRef name_ref = CFDictionaryGetValue(dictionary, kCGWindowName);\n    CFNumberRef layer_ref = CFDictionaryGetValue(dictionary, kCGWindowLayer);\n    CFDictionaryRef bounds_ref = CFDictionaryGetValue(dictionary,\n                                                      kCGWindowBounds);\n\n    if (!name_ref || !owner_ref || !owner_pid_ref || !layer_ref || !bounds_ref)\n      continue;\n\n    long long int layer = 0;\n    CFNumberGetValue(layer_ref, CFNumberGetType(layer_ref), &layer);\n    uint64_t owner_pid = 0;\n    CFNumberGetValue(owner_pid_ref,\n                     CFNumberGetType(owner_pid_ref),\n                     &owner_pid                     );\n\n    if (layer != 0x19) continue;\n    bounds = CGRectNull;\n    if (!CGRectMakeWithDictionaryRepresentation(bounds_ref, &bounds)) continue;\n    CFStringGetCString(owner_ref,\n                       owner_buffer,\n                       sizeof(owner_buffer),\n                       kCFStringEncodingUTF8);\n\n    CFStringGetCString(name_ref,\n                       name_buffer,\n                       sizeof(name_buffer),\n                       kCFStringEncodingUTF8);\n    snprintf(buffer, sizeof(buffer), \"%s,%s\", owner_buffer, name_buffer);\n\n    if (strcmp(buffer, alias) == 0) {\n      pid = owner_pid;\n      break;\n    }\n  }\n  CFRelease(window_list);\n  if (!pid) return NULL;\n\n  AXUIElementRef app = AXUIElementCreateApplication(pid);\n  if (!app) return NULL;\n  AXUIElementRef result = NULL;\n  CFTypeRef extras = NULL;\n  CFArrayRef children_ref = NULL;\n  AXError error = AXUIElementCopyAttributeValue(app,\n                                                kAXExtrasMenuBarAttribute,\n                                                &extras                   );\n  if (error == kAXErrorSuccess) {\n    error = AXUIElementCopyAttributeValue(extras,\n                                          kAXVisibleChildrenAttribute,\n                                          (CFTypeRef*)&children_ref   );\n\n    if (error == kAXErrorSuccess) {\n      uint32_t count = CFArrayGetCount(children_ref);\n      for (uint32_t i = 0; i < count; i++) {\n        AXUIElementRef item = CFArrayGetValueAtIndex(children_ref, i);\n        CFTypeRef position_ref = NULL;\n        CFTypeRef size_ref = NULL;\n        AXUIElementCopyAttributeValue(item, kAXPositionAttribute,\n                                            &position_ref        );\n        AXUIElementCopyAttributeValue(item, kAXSizeAttribute,\n                                            &size_ref        );\n        if (!position_ref || !size_ref) continue;\n\n        CGPoint position = CGPointZero;\n        AXValueGetValue(position_ref, kAXValueCGPointType, &position);\n        CGSize size = CGSizeZero;\n        AXValueGetValue(size_ref, kAXValueCGSizeType, &size);\n        CFRelease(position_ref);\n        CFRelease(size_ref);\n        // The offset is exactly 8 on macOS Sonoma...\n        // printf(\"%f %f\\n\", position.x, bounds.origin.x);\n        if (error == kAXErrorSuccess\n            && fabs(position.x - bounds.origin.x) <= 10) {\n          result = item;\n          break;\n        }\n      }\n    }\n  }\n\n  CFRelease(app);\n  return result;\n}\n\nextern int SLSMainConnectionID();\nextern void SLSSetMenuBarVisibilityOverrideOnDisplay(int cid, int did, bool enabled);\nextern void SLSSetMenuBarVisibilityOverrideOnDisplay(int cid, int did, bool enabled);\nextern void SLSSetMenuBarInsetAndAlpha(int cid, double u1, double u2, float alpha);\nvoid ax_select_menu_extra(char* alias) {\n  AXUIElementRef item = ax_get_extra_menu_item(alias);\n  if (!item) return;\n  SLSSetMenuBarInsetAndAlpha(SLSMainConnectionID(), 0, 1, 0.0);\n  SLSSetMenuBarVisibilityOverrideOnDisplay(SLSMainConnectionID(), 0, true);\n  SLSSetMenuBarInsetAndAlpha(SLSMainConnectionID(), 0, 1, 0.0);\n  ax_perform_click(item);\n  SLSSetMenuBarVisibilityOverrideOnDisplay(SLSMainConnectionID(), 0, false);\n  SLSSetMenuBarInsetAndAlpha(SLSMainConnectionID(), 0, 1, 1.0);\n  CFRelease(item);\n}\n\nextern void _SLPSGetFrontProcess(ProcessSerialNumber* psn);\nextern void SLSGetConnectionIDForPSN(int cid, ProcessSerialNumber* psn, int* cid_out);\nextern void SLSConnectionGetPID(int cid, pid_t* pid_out);\nAXUIElementRef ax_get_front_app() {\n  ProcessSerialNumber psn;\n  _SLPSGetFrontProcess(&psn);\n  int target_cid;\n  SLSGetConnectionIDForPSN(SLSMainConnectionID(), &psn, &target_cid);\n\n  pid_t pid;\n  SLSConnectionGetPID(target_cid, &pid);\n  return AXUIElementCreateApplication(pid);\n}\n\nint main (int argc, char **argv) {\n  if (argc == 1) {\n    printf(\"Usage: %s [-l | -s id/alias ]\\n\", argv[0]);\n    exit(0);\n  }\n  ax_init();\n  if (strcmp(argv[1], \"-l\") == 0) {\n    AXUIElementRef app = ax_get_front_app();\n    if (!app) return 1;\n    ax_print_menu_options(app);\n    CFRelease(app);\n  } else if (argc == 3 && strcmp(argv[1], \"-s\") == 0) {\n    int id = 0;\n    if (sscanf(argv[2], \"%d\", &id) == 1) {\n      AXUIElementRef app = ax_get_front_app();\n      if (!app) return 1;\n      ax_select_menu_option(app, id);\n      CFRelease(app);\n    } else ax_select_menu_extra(argv[2]);\n  }\n  return 0;\n}\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/event_providers/makefile": {
      "path": "helpers/event_providers/makefile",
      "language": "unknown",
      "dependencies": [],
      "content": "all:\n\t(cd cpu_load && $(MAKE))\n\t(cd network_load && $(MAKE))\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/event_providers/sketchybar.h": {
      "path": "helpers/event_providers/sketchybar.h",
      "language": "unknown",
      "dependencies": [],
      "content": "#pragma once\n\n#include <mach/arm/kern_return.h>\n#include <mach/mach.h>\n#include <mach/mach_port.h>\n#include <mach/message.h>\n#include <bootstrap.h>\n#include <stdlib.h>\n#include <pthread.h>\n#include <stdio.h>\n\ntypedef char* env;\n\n#define MACH_HANDLER(name) void name(env env)\ntypedef MACH_HANDLER(mach_handler);\n\nstruct mach_message {\n  mach_msg_header_t header;\n  mach_msg_size_t msgh_descriptor_count;\n  mach_msg_ool_descriptor_t descriptor;\n};\n\nstruct mach_buffer {\n  struct mach_message message;\n  mach_msg_trailer_t trailer;\n};\n\nstatic mach_port_t g_mach_port = 0;\n\nstatic inline mach_port_t mach_get_bs_port() {\n  mach_port_name_t task = mach_task_self();\n\n  mach_port_t bs_port;\n  if (task_get_special_port(task,\n                            TASK_BOOTSTRAP_PORT,\n                            &bs_port            ) != KERN_SUCCESS) {\n    return 0;\n  }\n\n  char* name = getenv(\"BAR_NAME\");\n  if (!name) name = \"sketchybar\";\n  uint32_t lookup_len = 16 + strlen(name);\n\n  char buffer[lookup_len];\n  snprintf(buffer, lookup_len, \"git.felix.%s\", name);\n\n  mach_port_t port;\n  if (bootstrap_look_up(bs_port, buffer, &port) != KERN_SUCCESS) return 0;\n  return port;\n}\n\nstatic inline bool mach_send_message(mach_port_t port, char* message, uint32_t len) {\n  if (!message || !port) {\n    return false;\n  }\n\n  struct mach_message msg = { 0 };\n  msg.header.msgh_remote_port = port;\n  msg.header.msgh_local_port = 0;\n  msg.header.msgh_id = 0;\n  msg.header.msgh_bits = MACH_MSGH_BITS_SET(MACH_MSG_TYPE_COPY_SEND,\n                                            MACH_MSG_TYPE_MAKE_SEND,\n                                            0,\n                                            MACH_MSGH_BITS_COMPLEX       );\n\n  msg.header.msgh_size = sizeof(struct mach_message);\n  msg.msgh_descriptor_count = 1;\n  msg.descriptor.address = message;\n  msg.descriptor.size = len * sizeof(char);\n  msg.descriptor.copy = MACH_MSG_VIRTUAL_COPY;\n  msg.descriptor.deallocate = false;\n  msg.descriptor.type = MACH_MSG_OOL_DESCRIPTOR;\n\n  kern_return_t err = mach_msg(&msg.header,\n                               MACH_SEND_MSG,\n                               sizeof(struct mach_message),\n                               0,\n                               MACH_PORT_NULL,\n                               MACH_MSG_TIMEOUT_NONE,\n                               MACH_PORT_NULL              );\n\n  return err == KERN_SUCCESS;\n}\n\nstatic inline uint32_t format_message(char* message, char* formatted_message) {\n  // This is not actually robust, switch to stack based messaging.\n  char outer_quote = 0;\n  uint32_t caret = 0;\n  uint32_t message_length = strlen(message) + 1;\n  for (int i = 0; i < message_length; ++i) {\n    if (message[i] == '\"' || message[i] == '\\'') {\n      if (outer_quote && outer_quote == message[i]) outer_quote = 0;\n      else if (!outer_quote) outer_quote = message[i];\n      continue;\n    }\n    formatted_message[caret] = message[i];\n    if (message[i] == ' ' && !outer_quote) formatted_message[caret] = '\\0';\n    caret++;\n  }\n\n  if (caret > 0 && formatted_message[caret] == '\\0'\n      && formatted_message[caret - 1] == '\\0') {\n    caret--;\n  }\n  formatted_message[caret] = '\\0';\n  return caret + 1;\n}\n\nstatic inline void sketchybar(char* message) {\n  char formatted_message[strlen(message) + 2];\n  uint32_t length = format_message(message, formatted_message);\n  if (!length) return;\n\n  if (!g_mach_port) g_mach_port = mach_get_bs_port();\n  if (!mach_send_message(g_mach_port, formatted_message, length)) {\n    g_mach_port = mach_get_bs_port();\n    if (!mach_send_message(g_mach_port, formatted_message, length)) {\n      // No sketchybar instance running, exit.\n      exit(0);\n    }\n  }\n}\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/event_providers/network_load/makefile": {
      "path": "helpers/event_providers/network_load/makefile",
      "language": "unknown",
      "dependencies": [],
      "content": "bin/network_load: network_load.c network.h ../sketchybar.h | bin\n\tclang -std=c99 -O3 $< -o $@\n\nbin:\n\tmkdir bin\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/event_providers/network_load/network.h": {
      "path": "helpers/event_providers/network_load/network.h",
      "language": "unknown",
      "dependencies": [],
      "content": "#include <math.h>\n#include <stdio.h>\n#include <string.h>\n#include <net/if.h>\n#include <net/if_mib.h>\n#include <sys/select.h>\n#include <sys/sysctl.h>\n\nstatic char unit_str[3][6] = { { \" Bps\" }, { \"KBps\" }, { \"MBps\" }, };\n\nenum unit {\n  UNIT_BPS,\n  UNIT_KBPS,\n  UNIT_MBPS\n};\nstruct network {\n  uint32_t row;\n  struct ifmibdata data;\n  struct timeval tv_nm1, tv_n, tv_delta;\n\n  int up;\n  int down;\n  enum unit up_unit, down_unit;\n};\n\nstatic inline void ifdata(uint32_t net_row, struct ifmibdata* data) {\n\tstatic size_t size = sizeof(struct ifmibdata);\n  static int32_t data_option[] = { CTL_NET, PF_LINK, NETLINK_GENERIC, IFMIB_IFDATA, 0, IFDATA_GENERAL };\n  data_option[4] = net_row;\n  sysctl(data_option, 6, data, &size, NULL, 0);\n}\n\nstatic inline void network_init(struct network* net, char* ifname) {\n  memset(net, 0, sizeof(struct network));\n\n  static int count_option[] = { CTL_NET, PF_LINK, NETLINK_GENERIC, IFMIB_SYSTEM, IFMIB_IFCOUNT };\n  uint32_t interface_count = 0;\n  size_t size = sizeof(uint32_t);\n  sysctl(count_option, 5, &interface_count, &size, NULL, 0);\n\n  for (int i = 0; i < interface_count; i++) {\n    ifdata(i, &net->data);\n    if (strcmp(net->data.ifmd_name, ifname) == 0) {\n      net->row = i;\n      break;\n    }\n  }\n}\n\nstatic inline void network_update(struct network* net) {\n  gettimeofday(&net->tv_n, NULL);\n  timersub(&net->tv_n, &net->tv_nm1, &net->tv_delta);\n  net->tv_nm1 = net->tv_n;\n\n  uint64_t ibytes_nm1 = net->data.ifmd_data.ifi_ibytes;\n  uint64_t obytes_nm1 = net->data.ifmd_data.ifi_obytes;\n  ifdata(net->row, &net->data);\n\n  double time_scale = (net->tv_delta.tv_sec + 1e-6*net->tv_delta.tv_usec);\n  if (time_scale < 1e-6 || time_scale > 1e2) return;\n  double delta_ibytes = (double)(net->data.ifmd_data.ifi_ibytes - ibytes_nm1)\n                        / time_scale;\n  double delta_obytes = (double)(net->data.ifmd_data.ifi_obytes - obytes_nm1)\n                        / time_scale;\n\n  double exponent_ibytes = log10(delta_ibytes);\n  double exponent_obytes = log10(delta_obytes);\n\n  if (exponent_ibytes < 3) {\n    net->down_unit = UNIT_BPS;\n    net->down = delta_ibytes;\n  } else if (exponent_ibytes < 6) {\n    net->down_unit = UNIT_KBPS;\n    net->down = delta_ibytes / 1000.0;\n  } else if (exponent_ibytes < 9) {\n    net->down_unit = UNIT_MBPS;\n    net->down = delta_ibytes / 1000000.0;\n  }\n\n  if (exponent_obytes < 3) {\n    net->up_unit = UNIT_BPS;\n    net->up = delta_obytes;\n  } else if (exponent_obytes < 6) {\n    net->up_unit = UNIT_KBPS;\n    net->up = delta_obytes / 1000.0;\n  } else if (exponent_obytes < 9) {\n    net->up_unit = UNIT_MBPS;\n    net->up = delta_obytes / 1000000.0;\n  }\n}\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/event_providers/network_load/network_load.c": {
      "path": "helpers/event_providers/network_load/network_load.c",
      "language": "unknown",
      "dependencies": [],
      "content": "#include <unistd.h>\n#include \"network.h\"\n#include \"../sketchybar.h\"\n\nint main (int argc, char** argv) {\n  float update_freq;\n  if (argc < 4 || (sscanf(argv[3], \"%f\", &update_freq) != 1)) {\n    printf(\"Usage: %s \\\"<interface>\\\" \\\"<event-name>\\\" \\\"<event_freq>\\\"\\n\", argv[0]);\n    exit(1);\n  }\n\n  alarm(0);\n  // Setup the event in sketchybar\n  char event_message[512];\n  snprintf(event_message, 512, \"--add event '%s'\", argv[2]);\n  sketchybar(event_message);\n\n  struct network network;\n  network_init(&network, argv[1]);\n  char trigger_message[512];\n  for (;;) {\n    // Acquire new info\n    network_update(&network);\n\n    // Prepare the event message\n    snprintf(trigger_message,\n             512,\n             \"--trigger '%s' upload='%03d%s' download='%03d%s'\",\n             argv[2],\n             network.up,\n             unit_str[network.up_unit],\n             network.down,\n             unit_str[network.down_unit]);\n\n    // Trigger the event\n    sketchybar(trigger_message);\n\n    // Wait\n    usleep(update_freq * 1000000);\n  }\n  return 0;\n}\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/event_providers/cpu_load/makefile": {
      "path": "helpers/event_providers/cpu_load/makefile",
      "language": "unknown",
      "dependencies": [],
      "content": "bin/cpu_load: cpu_load.c cpu.h ../sketchybar.h | bin\n\tclang -std=c99 -O3 $< -o $@\n\nbin:\n\tmkdir bin\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/event_providers/cpu_load/cpu.h": {
      "path": "helpers/event_providers/cpu_load/cpu.h",
      "language": "unknown",
      "dependencies": [],
      "content": "#include <mach/mach.h>\n#include <stdbool.h>\n#include <unistd.h>\n#include <stdio.h>\n\nstruct cpu {\n  host_t host;\n  mach_msg_type_number_t count;\n  host_cpu_load_info_data_t load;\n  host_cpu_load_info_data_t prev_load;\n  bool has_prev_load;\n\n  int user_load;\n  int sys_load;\n  int total_load;\n};\n\nstatic inline void cpu_init(struct cpu* cpu) {\n  cpu->host = mach_host_self();\n  cpu->count = HOST_CPU_LOAD_INFO_COUNT;\n  cpu->has_prev_load = false;\n}\n\nstatic inline void cpu_update(struct cpu* cpu) {\n  kern_return_t error = host_statistics(cpu->host,\n                                        HOST_CPU_LOAD_INFO,\n                                        (host_info_t)&cpu->load,\n                                        &cpu->count                );\n\n  if (error != KERN_SUCCESS) {\n    printf(\"Error: Could not read cpu host statistics.\\n\");\n    return;\n  }\n\n  if (cpu->has_prev_load) {\n    uint32_t delta_user = cpu->load.cpu_ticks[CPU_STATE_USER]\n                          - cpu->prev_load.cpu_ticks[CPU_STATE_USER];\n\n    uint32_t delta_system = cpu->load.cpu_ticks[CPU_STATE_SYSTEM]\n                            - cpu->prev_load.cpu_ticks[CPU_STATE_SYSTEM];\n\n    uint32_t delta_idle = cpu->load.cpu_ticks[CPU_STATE_IDLE]\n                          - cpu->prev_load.cpu_ticks[CPU_STATE_IDLE];\n\n    cpu->user_load = (double)delta_user / (double)(delta_system\n                                                     + delta_user\n                                                     + delta_idle) * 100.0;\n\n    cpu->sys_load = (double)delta_system / (double)(delta_system\n                                                      + delta_user\n                                                      + delta_idle) * 100.0;\n\n    cpu->total_load = cpu->user_load + cpu->sys_load;\n  }\n\n  cpu->prev_load = cpu->load;\n  cpu->has_prev_load = true;\n}\n",
      "purpose": "",
      "content_summary": ""
    },
    "helpers/event_providers/cpu_load/cpu_load.c": {
      "path": "helpers/event_providers/cpu_load/cpu_load.c",
      "language": "unknown",
      "dependencies": [],
      "content": "#include \"cpu.h\"\n#include \"../sketchybar.h\"\n\nint main (int argc, char** argv) {\n  float update_freq;\n  if (argc < 3 || (sscanf(argv[2], \"%f\", &update_freq) != 1)) {\n    printf(\"Usage: %s \\\"<event-name>\\\" \\\"<event_freq>\\\"\\n\", argv[0]);\n    exit(1);\n  }\n\n  alarm(0);\n  struct cpu cpu;\n  cpu_init(&cpu);\n\n  // Setup the event in sketchybar\n  char event_message[512];\n  snprintf(event_message, 512, \"--add event '%s'\", argv[1]);\n  sketchybar(event_message);\n\n  char trigger_message[512];\n  for (;;) {\n    // Acquire new info\n    cpu_update(&cpu);\n\n    // Prepare the event message\n    snprintf(trigger_message,\n             512,\n             \"--trigger '%s' user_load='%d' sys_load='%02d' total_load='%02d'\",\n             argv[1],\n             cpu.user_load,\n             cpu.sys_load,\n             cpu.total_load                                        );\n\n    // Trigger the event\n    sketchybar(trigger_message);\n\n    // Wait\n    usleep(update_freq * 1000000);\n  }\n  return 0;\n}\n",
      "purpose": "",
      "content_summary": ""
    }
  }
}